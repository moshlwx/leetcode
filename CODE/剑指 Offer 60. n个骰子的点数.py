'''
剑指 Offer 60. n个骰子的点数
把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。

 

你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。

 

示例 1:

输入: 1
输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]
示例 2:

输入: 2
输出: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]
 

限制：

1 <= n <= 11
'''


class Solution:
    def dicesProbability(self, n: int):
        '''动态规划
        dp[i][j]:前i个骰子和为j的概率
        '''
        dp = [[0 for _ in range(n*6+1)] for _ in range(n+1)]

        # 当一个骰子时，1-6个点数和的概率为1/6
        for j in range(1, 7):
            dp[1][j] = 1/6

        for i in range(1, n+1):
            for j in range(1, n*6+1):
                for k in range(1, 7):
                    dp[i][j] += dp[i-1][j-k] / 6

        # 点数之和至少为n，从第n个元素开始输出
        return dp[-1][n:]


n = 2
print(Solution().dicesProbability(n))
